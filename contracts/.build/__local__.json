{"manifest": "ethpm/3", "sources": {"Strings.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x9d0a74a21646004cddfb9ce76172500f"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}", "references": ["ECDSA.sol"], "imports": []}, "worldcoin/world-id/interfaces/IWorldID.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xa1b60ec5554b849f9f32d11b9713afa9"}, "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\ninterface IWorldID {\n    /// @notice Reverts if the zero-knowledge proof is invalid.\n    /// @param root The of the Merkle tree\n    /// @param groupId The id of the Semaphore group\n    /// @param signalHash A keccak256 hash of the Semaphore signal\n    /// @param nullifierHash The nullifier hash\n    /// @param externalNullifierHash A keccak256 hash of the external nullifier\n    /// @param proof The zero-knowledge proof\n    /// @dev  Note that a double-signaling check is not included here, and should be carried by the caller.\n    function verifyProof(\n        uint256 root,\n        uint256 groupId,\n        uint256 signalHash,\n        uint256 nullifierHash,\n        uint256 externalNullifierHash,\n        uint256[8] calldata proof\n    ) external view;\n}", "references": ["Keycovery.sol"], "imports": []}, "ECDSA.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xa6c07cede4f305ddfe5cd01632afc009"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}", "references": ["Keycovery.sol"], "imports": ["Strings.sol"]}, "worldcoin/world-id/libraries/ByteHasher.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xc575a4ecd2d20a964f09422f5f2a5212"}, "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nlibrary ByteHasher {\n    /// @dev Creates a keccak256 hash of a bytestring.\n    /// @param value The bytestring to hash\n    /// @return The hash of the specified value\n    /// @dev `>> 8` makes sure that the result is included in our field\n    function hashToField(bytes memory value) internal pure returns (uint256) {\n        return uint256(keccak256(abi.encodePacked(value))) >> 8;\n    }\n}", "references": ["Keycovery.sol"], "imports": []}, "Keycovery.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xaed54231bd7f4cc1b122afe8805d7068"}, "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\nimport \"./worldcoin/world-id/interfaces/IWorldID.sol\";\nimport \"./worldcoin/world-id/libraries/ByteHasher.sol\";\n\n/**\n * The Keycovery database contract.\n */\ncontract Keycovery {\n\n  using ByteHasher for bytes;\n\n  /**\n   * Mapping from account address to its initialized friend list\n   */\n  mapping (address => mapping(address => bool)) private friends;\n\n  /**\n   * Number of friends an account has.\n   */\n  mapping (address => uint256) public friendCount;\n\n  /**\n   * Mapping from an account address to it's approved recoverer address\n   */\n  mapping (address => address) private approvedRecoverer;\n\n  /**\n   * Nonce counter\n   */\n  mapping (address => uint256) public recoveryNonce;\n\n  /**\n   * Seen signers\n   */\n  mapping (address => bool) public seenSigners;\n\n  bool public isPaused;\n  address public admin;\n\n  event RecovererVerified(address indexed recoverer);\n\n  uint256 internal immutable groupId;\n  IWorldID internal immutable worldId;\n\n  mapping(address => bool) public isVerified;\n\n  constructor(IWorldID _worldId, uint256 _groupId) payable {\n    worldId = _worldId;\n    groupId = _groupId;\n    admin = msg.sender;\n    isPaused = false;\n  }\n\n  modifier notPaused() { \n    require(!isPaused); \n    _; \n  }\n  \n  event InitializedFriends(address[] friends);\n  \n  function verify(\n        address recoverer,\n        uint256 root,\n        uint256 nullifierHash,\n        uint256[8] calldata proof\n  ) public payable {\n      worldId.verifyProof(\n          root,\n          groupId,\n          abi.encodePacked(recoverer).hashToField(),\n          nullifierHash,\n          abi.encodePacked(\"wid_staging_90a71492daca49652946f01ead1524de\").hashToField(),\n          proof\n      );\n\n      isVerified[recoverer] = true;\n\n      emit RecovererVerified(recoverer);\n  }\n\n  /**\n   * Initialize an account (msg.sender) with an array of friends\n   */\n  function initializeWalletFriends(address[] memory friendArray) external notPaused {\n    for (uint i = 0; i < friendArray.length; i++) {\n      friends[msg.sender][friendArray[i]] = true;\n    }\n\n    friendCount[msg.sender] = friendArray.length;\n\n    emit InitializedFriends(friendArray);\n  }\n  \n  /**\n   * Getter for if an address is authorized to recover the private key\n   */\n  function isAuthorizedRecoverer(address lost, address recoverer) external view notPaused returns (bool) {\n    return approvedRecoverer[lost] == recoverer;\n  }\n\n  /**\n   * Approve a recoverer to access the \"lost\" wallet's private key. Needs signatures from all friends.\n   * Returns true on success, false otherwise.\n   */\n  function approveRecoverer(address lost, address recoverer, uint256 nonce, bytes[] calldata signatures) external notPaused returns (bool) {\n    // require(isVerified[recoverer]);\n    require(nonce == recoveryNonce[lost]);\n    require(friendCount[lost] == signatures.length);\n\n    bytes32 messageHash = keccak256(\n      abi.encode(lost, recoverer, nonce)\n    );\n\n    address[] memory seenFriends = new address[](friendCount[lost]);\n\n    // Check that each friend has signed the message.\n    for(uint i = 0; i < friendCount[lost]; i++) {\n      address signer = ECDSA.recover(messageHash, signatures[i]);\n      require(!seenSigners[signer]);\n      require(friends[lost][signer]);\n      seenSigners[signer] = true;\n      seenFriends[i] = signer;\n    }\n\n    // Reset seen signers list.\n    for(uint i = 0; i < friendCount[lost]; i++) {\n      address friend = seenFriends[i];\n      seenSigners[friend] = false;\n    }\n\n    approvedRecoverer[lost] = recoverer;\n    recoveryNonce[lost] += 1;\n\n    return true;\n  }\n\n  function pause() external {\n    require(msg.sender == admin);\n    isPaused = true;\n  }\n}\n\n", "references": [], "imports": ["worldcoin/world-id/interfaces/IWorldID.sol", "worldcoin/world-id/libraries/ByteHasher.sol", "ECDSA.sol"]}}, "contractTypes": {"ECDSA": {"contractName": "ECDSA", "sourceId": "ECDSA.sol", "deploymentBytecode": {"bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202e0d729bc9a2a64979444643446c54df8e04b1ceb70abc316f68fe3547548db464736f6c634300080f0033"}, "runtimeBytecode": {"bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202e0d729bc9a2a64979444643446c54df8e04b1ceb70abc316f68fe3547548db464736f6c634300080f0033"}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.", "kind": "dev", "methods": {}, "version": 1}}, "Keycovery": {"contractName": "Keycovery", "sourceId": "Keycovery.sol", "deploymentBytecode": {"bytecode": "0x60c060405260405161106538038061106583398101604081905261002291610053565b6001600160a01b039190911660a052608052600580546001600160a81b031916336101000260ff191617905561008d565b6000806040838503121561006657600080fd5b82516001600160a01b038116811461007d57600080fd5b6020939093015192949293505050565b60805160a051610fb36100b26000396000610339015260006103690152610fb36000f3fe60806040526004361061009c5760003560e01c8063a20ab6b511610064578063a20ab6b51461015b578063b187bd261461018b578063b9209e33146101a5578063bb2f7494146101d5578063e902e33c14610202578063f851a4401461022257600080fd5b8063123c3a87146100a15780631e6ab533146100c357806323cb5d10146100d657806349bcad0a1461010b5780638456cb5914610146575b600080fd5b3480156100ad57600080fd5b506100c16100bc366004610bf9565b61025f565b005b6100c16100d1366004610cbe565b610337565b3480156100e257600080fd5b506100f66100f1366004610d0c565b6104b6565b60405190151581526020015b60405180910390f35b34801561011757600080fd5b50610138610126366004610daa565b60036020526000908152604090205481565b604051908152602001610102565b34801561015257600080fd5b506100c16107bb565b34801561016757600080fd5b506100f6610176366004610daa565b60046020526000908152604090205460ff1681565b34801561019757600080fd5b506005546100f69060ff1681565b3480156101b157600080fd5b506100f66101c0366004610daa565b60066020526000908152604090205460ff1681565b3480156101e157600080fd5b506101386101f0366004610daa565b60016020526000908152604090205481565b34801561020e57600080fd5b506100f661021d366004610dcc565b6107e6565b34801561022e57600080fd5b506005546102479061010090046001600160a01b031681565b6040516001600160a01b039091168152602001610102565b60055460ff161561026f57600080fd5b60005b81518110156102e6573360009081526020819052604081208351600192908590859081106102a2576102a2610dff565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806102de81610e2b565b915050610272565b508051336000908152600160205260409081902091909155517fea65d08fb21a2c2b924426b0aa597baecda61ac7f10dbb1ebb97010b078dc1569061032c908390610e44565b60405180910390a150565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633bc778e3847f00000000000000000000000000000000000000000000000000000000000000006103c8886040516020016103b4919060609190911b6bffffffffffffffffffffffff1916815260140190565b60405160208183030381529060405261081c565b866104146040516020016103b4907f7769645f73746167696e675f393061373134393264616361343936353239343681526b66303165616431353234646560a01b6020820152602c0190565b876040518763ffffffff1660e01b815260040161043696959493929190610e91565b60006040518083038186803b15801561044e57600080fd5b505afa158015610462573d6000803e3d6000fd5b5050506001600160a01b038516600081815260066020526040808220805460ff19166001179055519192507fe2c6f560bd6819cb1c5d492ba2d8d755610e0b7937501651a3634b1ac815e3c891a250505050565b60055460009060ff16156104c957600080fd5b6001600160a01b03861660009081526003602052604090205484146104ed57600080fd5b6001600160a01b038616600090815260016020526040902054821461051157600080fd5b604080516001600160a01b0388811660208084018290529189168385015260608084018990528451808503909101815260809093018452825192820192909220600092835260019091529181205467ffffffffffffffff81111561057757610577610bc7565b6040519080825280602002602001820160405280156105a0578160200160208202803683370190505b50905060005b6001600160a01b0389166000908152600160205260409020548110156106e757600061062a848888858181106105de576105de610dff565b90506020028101906105f09190610ecd565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061085192505050565b6001600160a01b03811660009081526004602052604090205490915060ff161561065357600080fd5b6001600160a01b03808b166000908152602081815260408083209385168352929052205460ff1661068357600080fd5b6001600160a01b0381166000908152600460205260409020805460ff19166001179055825181908490849081106106bc576106bc610dff565b6001600160a01b039092166020928302919091019091015250806106df81610e2b565b9150506105a6565b5060005b6001600160a01b03891660009081526001602052604090205481101561075d57600082828151811061071f5761071f610dff565b6020908102919091018101516001600160a01b03166000908152600490915260409020805460ff19169055508061075581610e2b565b9150506106eb565b506001600160a01b03888116600090815260026020908152604080832080546001600160a01b031916948c1694909417909355600390529081208054600192906107a8908490610f14565b9091555060019998505050505050505050565b60055461010090046001600160a01b031633146107d757600080fd5b6005805460ff19166001179055565b60055460009060ff16156107f957600080fd5b506001600160a01b03918216600090815260026020526040902054821691161490565b60006008826040516020016108319190610f2c565b60408051601f198184030181529190528051602090910120901c92915050565b60008060006108608585610875565b9150915061086d816108e3565b509392505050565b60008082516041036108ab5760208301516040840151606085015160001a61089f87828585610aa1565b945094505050506108dc565b82516040036108d457602083015160408401516108c9868383610b8e565b9350935050506108dc565b506000905060025b9250929050565b60008160048111156108f7576108f7610f67565b036108ff5750565b600181600481111561091357610913610f67565b036109655760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064015b60405180910390fd5b600281600481111561097957610979610f67565b036109c65760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161095c565b60038160048111156109da576109da610f67565b03610a325760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161095c565b6004816004811115610a4657610a46610f67565b03610a9e5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161095c565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610ad85750600090506003610b85565b8460ff16601b14158015610af057508460ff16601c14155b15610b015750600090506004610b85565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610b55573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610b7e57600060019250925050610b85565b9150600090505b94509492505050565b6000806001600160ff1b03831681610bab60ff86901c601b610f14565b9050610bb987828885610aa1565b935093505050935093915050565b634e487b7160e01b600052604160045260246000fd5b80356001600160a01b0381168114610bf457600080fd5b919050565b60006020808385031215610c0c57600080fd5b823567ffffffffffffffff80821115610c2457600080fd5b818501915085601f830112610c3857600080fd5b813581811115610c4a57610c4a610bc7565b8060051b604051601f19603f83011681018181108582111715610c6f57610c6f610bc7565b604052918252848201925083810185019188831115610c8d57600080fd5b938501935b82851015610cb257610ca385610bdd565b84529385019392850192610c92565b98975050505050505050565b600080600080610160808688031215610cd657600080fd5b610cdf86610bdd565b94506020860135935060408601359250868187011115610cfe57600080fd5b509295919450926060019150565b600080600080600060808688031215610d2457600080fd5b610d2d86610bdd565b9450610d3b60208701610bdd565b935060408601359250606086013567ffffffffffffffff80821115610d5f57600080fd5b818801915088601f830112610d7357600080fd5b813581811115610d8257600080fd5b8960208260051b8501011115610d9757600080fd5b9699959850939650602001949392505050565b600060208284031215610dbc57600080fd5b610dc582610bdd565b9392505050565b60008060408385031215610ddf57600080fd5b610de883610bdd565b9150610df660208401610bdd565b90509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610e3d57610e3d610e15565b5060010190565b6020808252825182820181905260009190848201906040850190845b81811015610e855783516001600160a01b031683529284019291840191600101610e60565b50909695505050505050565b60006101a0820190508782528660208301528560408301528460608301528360808301526101008360a084013760008152979650505050505050565b6000808335601e19843603018112610ee457600080fd5b83018035915067ffffffffffffffff821115610eff57600080fd5b6020019150368190038213156108dc57600080fd5b60008219821115610f2757610f27610e15565b500190565b6000825160005b81811015610f4d5760208186018101518583015201610f33565b81811115610f5c576000828501525b509190910192915050565b634e487b7160e01b600052602160045260246000fdfea264697066735822122027bc657fa575dfbe05bfe4b0c29eb9588a97b3ec0dc92756b528c23b6e4034b964736f6c634300080f0033"}, "runtimeBytecode": {"bytecode": "0x60c060405260405161106538038061106583398101604081905261002291610053565b6001600160a01b039190911660a052608052600580546001600160a81b031916336101000260ff191617905561008d565b6000806040838503121561006657600080fd5b82516001600160a01b038116811461007d57600080fd5b6020939093015192949293505050565b60805160a051610fb36100b26000396000610339015260006103690152610fb36000f3fe60806040526004361061009c5760003560e01c8063a20ab6b511610064578063a20ab6b51461015b578063b187bd261461018b578063b9209e33146101a5578063bb2f7494146101d5578063e902e33c14610202578063f851a4401461022257600080fd5b8063123c3a87146100a15780631e6ab533146100c357806323cb5d10146100d657806349bcad0a1461010b5780638456cb5914610146575b600080fd5b3480156100ad57600080fd5b506100c16100bc366004610bf9565b61025f565b005b6100c16100d1366004610cbe565b610337565b3480156100e257600080fd5b506100f66100f1366004610d0c565b6104b6565b60405190151581526020015b60405180910390f35b34801561011757600080fd5b50610138610126366004610daa565b60036020526000908152604090205481565b604051908152602001610102565b34801561015257600080fd5b506100c16107bb565b34801561016757600080fd5b506100f6610176366004610daa565b60046020526000908152604090205460ff1681565b34801561019757600080fd5b506005546100f69060ff1681565b3480156101b157600080fd5b506100f66101c0366004610daa565b60066020526000908152604090205460ff1681565b3480156101e157600080fd5b506101386101f0366004610daa565b60016020526000908152604090205481565b34801561020e57600080fd5b506100f661021d366004610dcc565b6107e6565b34801561022e57600080fd5b506005546102479061010090046001600160a01b031681565b6040516001600160a01b039091168152602001610102565b60055460ff161561026f57600080fd5b60005b81518110156102e6573360009081526020819052604081208351600192908590859081106102a2576102a2610dff565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806102de81610e2b565b915050610272565b508051336000908152600160205260409081902091909155517fea65d08fb21a2c2b924426b0aa597baecda61ac7f10dbb1ebb97010b078dc1569061032c908390610e44565b60405180910390a150565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633bc778e3847f00000000000000000000000000000000000000000000000000000000000000006103c8886040516020016103b4919060609190911b6bffffffffffffffffffffffff1916815260140190565b60405160208183030381529060405261081c565b866104146040516020016103b4907f7769645f73746167696e675f393061373134393264616361343936353239343681526b66303165616431353234646560a01b6020820152602c0190565b876040518763ffffffff1660e01b815260040161043696959493929190610e91565b60006040518083038186803b15801561044e57600080fd5b505afa158015610462573d6000803e3d6000fd5b5050506001600160a01b038516600081815260066020526040808220805460ff19166001179055519192507fe2c6f560bd6819cb1c5d492ba2d8d755610e0b7937501651a3634b1ac815e3c891a250505050565b60055460009060ff16156104c957600080fd5b6001600160a01b03861660009081526003602052604090205484146104ed57600080fd5b6001600160a01b038616600090815260016020526040902054821461051157600080fd5b604080516001600160a01b0388811660208084018290529189168385015260608084018990528451808503909101815260809093018452825192820192909220600092835260019091529181205467ffffffffffffffff81111561057757610577610bc7565b6040519080825280602002602001820160405280156105a0578160200160208202803683370190505b50905060005b6001600160a01b0389166000908152600160205260409020548110156106e757600061062a848888858181106105de576105de610dff565b90506020028101906105f09190610ecd565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061085192505050565b6001600160a01b03811660009081526004602052604090205490915060ff161561065357600080fd5b6001600160a01b03808b166000908152602081815260408083209385168352929052205460ff1661068357600080fd5b6001600160a01b0381166000908152600460205260409020805460ff19166001179055825181908490849081106106bc576106bc610dff565b6001600160a01b039092166020928302919091019091015250806106df81610e2b565b9150506105a6565b5060005b6001600160a01b03891660009081526001602052604090205481101561075d57600082828151811061071f5761071f610dff565b6020908102919091018101516001600160a01b03166000908152600490915260409020805460ff19169055508061075581610e2b565b9150506106eb565b506001600160a01b03888116600090815260026020908152604080832080546001600160a01b031916948c1694909417909355600390529081208054600192906107a8908490610f14565b9091555060019998505050505050505050565b60055461010090046001600160a01b031633146107d757600080fd5b6005805460ff19166001179055565b60055460009060ff16156107f957600080fd5b506001600160a01b03918216600090815260026020526040902054821691161490565b60006008826040516020016108319190610f2c565b60408051601f198184030181529190528051602090910120901c92915050565b60008060006108608585610875565b9150915061086d816108e3565b509392505050565b60008082516041036108ab5760208301516040840151606085015160001a61089f87828585610aa1565b945094505050506108dc565b82516040036108d457602083015160408401516108c9868383610b8e565b9350935050506108dc565b506000905060025b9250929050565b60008160048111156108f7576108f7610f67565b036108ff5750565b600181600481111561091357610913610f67565b036109655760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064015b60405180910390fd5b600281600481111561097957610979610f67565b036109c65760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161095c565b60038160048111156109da576109da610f67565b03610a325760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161095c565b6004816004811115610a4657610a46610f67565b03610a9e5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161095c565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610ad85750600090506003610b85565b8460ff16601b14158015610af057508460ff16601c14155b15610b015750600090506004610b85565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610b55573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610b7e57600060019250925050610b85565b9150600090505b94509492505050565b6000806001600160ff1b03831681610bab60ff86901c601b610f14565b9050610bb987828885610aa1565b935093505050935093915050565b634e487b7160e01b600052604160045260246000fd5b80356001600160a01b0381168114610bf457600080fd5b919050565b60006020808385031215610c0c57600080fd5b823567ffffffffffffffff80821115610c2457600080fd5b818501915085601f830112610c3857600080fd5b813581811115610c4a57610c4a610bc7565b8060051b604051601f19603f83011681018181108582111715610c6f57610c6f610bc7565b604052918252848201925083810185019188831115610c8d57600080fd5b938501935b82851015610cb257610ca385610bdd565b84529385019392850192610c92565b98975050505050505050565b600080600080610160808688031215610cd657600080fd5b610cdf86610bdd565b94506020860135935060408601359250868187011115610cfe57600080fd5b509295919450926060019150565b600080600080600060808688031215610d2457600080fd5b610d2d86610bdd565b9450610d3b60208701610bdd565b935060408601359250606086013567ffffffffffffffff80821115610d5f57600080fd5b818801915088601f830112610d7357600080fd5b813581811115610d8257600080fd5b8960208260051b8501011115610d9757600080fd5b9699959850939650602001949392505050565b600060208284031215610dbc57600080fd5b610dc582610bdd565b9392505050565b60008060408385031215610ddf57600080fd5b610de883610bdd565b9150610df660208401610bdd565b90509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610e3d57610e3d610e15565b5060010190565b6020808252825182820181905260009190848201906040850190845b81811015610e855783516001600160a01b031683529284019291840191600101610e60565b50909695505050505050565b60006101a0820190508782528660208301528560408301528460608301528360808301526101008360a084013760008152979650505050505050565b6000808335601e19843603018112610ee457600080fd5b83018035915067ffffffffffffffff821115610eff57600080fd5b6020019150368190038213156108dc57600080fd5b60008219821115610f2757610f27610e15565b500190565b6000825160005b81811015610f4d5760208186018101518583015201610f33565b81811115610f5c576000828501525b509190910192915050565b634e487b7160e01b600052602160045260246000fdfea264697066735822122027bc657fa575dfbe05bfe4b0c29eb9588a97b3ec0dc92756b528c23b6e4034b964736f6c634300080f0033"}, "abi": [{"type": "constructor", "stateMutability": "payable", "inputs": [{"name": "_worldId", "type": "address", "internalType": "contract IWorldID"}, {"name": "_groupId", "type": "uint256", "internalType": "uint256"}]}, {"type": "event", "name": "InitializedFriends", "inputs": [{"name": "friends", "type": "address[]", "internalType": "address[]", "indexed": false}], "anonymous": false}, {"type": "event", "name": "RecovererVerified", "inputs": [{"name": "recoverer", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "function", "name": "admin", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "approveRecoverer", "stateMutability": "nonpayable", "inputs": [{"name": "lost", "type": "address", "internalType": "address"}, {"name": "recoverer", "type": "address", "internalType": "address"}, {"name": "nonce", "type": "uint256", "internalType": "uint256"}, {"name": "signatures", "type": "bytes[]", "internalType": "bytes[]"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "friendCount", "stateMutability": "view", "inputs": [{"name": "", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "initializeWalletFriends", "stateMutability": "nonpayable", "inputs": [{"name": "friendArray", "type": "address[]", "internalType": "address[]"}], "outputs": []}, {"type": "function", "name": "isAuthorizedRecoverer", "stateMutability": "view", "inputs": [{"name": "lost", "type": "address", "internalType": "address"}, {"name": "recoverer", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "isPaused", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "isVerified", "stateMutability": "view", "inputs": [{"name": "", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "pause", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "recoveryNonce", "stateMutability": "view", "inputs": [{"name": "", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "seenSigners", "stateMutability": "view", "inputs": [{"name": "", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "verify", "stateMutability": "payable", "inputs": [{"name": "recoverer", "type": "address", "internalType": "address"}, {"name": "root", "type": "uint256", "internalType": "uint256"}, {"name": "nullifierHash", "type": "uint256", "internalType": "uint256"}, {"name": "proof", "type": "uint256[8]", "internalType": "uint256[8]"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {"approveRecoverer(address,address,uint256,bytes[])": {"notice": "Approve a recoverer to access the \"lost\" wallet's private key. Needs signatures from all friends. Returns true on success, false otherwise."}, "friendCount(address)": {"notice": "Number of friends an account has."}, "initializeWalletFriends(address[])": {"notice": "Initialize an account (msg.sender) with an array of friends"}, "isAuthorizedRecoverer(address,address)": {"notice": "Getter for if an address is authorized to recover the private key"}, "recoveryNonce(address)": {"notice": "Nonce counter"}, "seenSigners(address)": {"notice": "Seen signers"}}, "notice": "The Keycovery database contract.", "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "Strings": {"contractName": "Strings", "sourceId": "Strings.sol", "deploymentBytecode": {"bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203bb64bb8d7f5cfc521795246cbe34c63ac4f0a2cf3774f33c0c661cfa460199964736f6c634300080f0033"}, "runtimeBytecode": {"bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203bb64bb8d7f5cfc521795246cbe34c63ac4f0a2cf3774f33c0c661cfa460199964736f6c634300080f0033"}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "String operations.", "kind": "dev", "methods": {}, "version": 1}}, "IWorldID": {"contractName": "IWorldID", "sourceId": "worldcoin/world-id/interfaces/IWorldID.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "function", "name": "verifyProof", "stateMutability": "view", "inputs": [{"name": "root", "type": "uint256", "internalType": "uint256"}, {"name": "groupId", "type": "uint256", "internalType": "uint256"}, {"name": "signalHash", "type": "uint256", "internalType": "uint256"}, {"name": "nullifierHash", "type": "uint256", "internalType": "uint256"}, {"name": "externalNullifierHash", "type": "uint256", "internalType": "uint256"}, {"name": "proof", "type": "uint256[8]", "internalType": "uint256[8]"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {"verifyProof(uint256,uint256,uint256,uint256,uint256,uint256[8])": {"notice": "Reverts if the zero-knowledge proof is invalid."}}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"verifyProof(uint256,uint256,uint256,uint256,uint256,uint256[8])": {"details": "Note that a double-signaling check is not included here, and should be carried by the caller.", "params": {"externalNullifierHash": "A keccak256 hash of the external nullifier", "groupId": "The id of the Semaphore group", "nullifierHash": "The nullifier hash", "proof": "The zero-knowledge proof", "root": "The of the Merkle tree", "signalHash": "A keccak256 hash of the Semaphore signal"}}}, "version": 1}}, "ByteHasher": {"contractName": "ByteHasher", "sourceId": "worldcoin/world-id/libraries/ByteHasher.sol", "deploymentBytecode": {"bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d130f0b66a5404968be7076f612aee22389960dd31d1c1a3026ca98b1b3ff49f64736f6c634300080f0033"}, "runtimeBytecode": {"bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d130f0b66a5404968be7076f612aee22389960dd31d1c1a3026ca98b1b3ff49f64736f6c634300080f0033"}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}}}