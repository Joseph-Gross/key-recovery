{"manifest": "ethpm/3", "sources": {"Strings.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x9d0a74a21646004cddfb9ce76172500f"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}", "references": ["ECDSA.sol"], "imports": []}, "worldcoin/world-id/interfaces/IWorldID.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xa1b60ec5554b849f9f32d11b9713afa9"}, "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\ninterface IWorldID {\n    /// @notice Reverts if the zero-knowledge proof is invalid.\n    /// @param root The of the Merkle tree\n    /// @param groupId The id of the Semaphore group\n    /// @param signalHash A keccak256 hash of the Semaphore signal\n    /// @param nullifierHash The nullifier hash\n    /// @param externalNullifierHash A keccak256 hash of the external nullifier\n    /// @param proof The zero-knowledge proof\n    /// @dev  Note that a double-signaling check is not included here, and should be carried by the caller.\n    function verifyProof(\n        uint256 root,\n        uint256 groupId,\n        uint256 signalHash,\n        uint256 nullifierHash,\n        uint256 externalNullifierHash,\n        uint256[8] calldata proof\n    ) external view;\n}", "references": ["Keycovery.sol"], "imports": []}, "ECDSA.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xa6c07cede4f305ddfe5cd01632afc009"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}", "references": ["Keycovery.sol"], "imports": ["Strings.sol"]}, "worldcoin/world-id/libraries/ByteHasher.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xc575a4ecd2d20a964f09422f5f2a5212"}, "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nlibrary ByteHasher {\n    /// @dev Creates a keccak256 hash of a bytestring.\n    /// @param value The bytestring to hash\n    /// @return The hash of the specified value\n    /// @dev `>> 8` makes sure that the result is included in our field\n    function hashToField(bytes memory value) internal pure returns (uint256) {\n        return uint256(keccak256(abi.encodePacked(value))) >> 8;\n    }\n}", "references": ["Keycovery.sol"], "imports": []}, "Keycovery.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xb289cc770ba38f1ffdf9af8c7c78fcee"}, "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\nimport \"./worldcoin/world-id/interfaces/IWorldID.sol\";\nimport \"./worldcoin/world-id/libraries/ByteHasher.sol\";\n\n/**\n * The Keycovery database contract.\n */\ncontract Keycovery {\n\n  using ByteHasher for bytes;\n\n  /**\n   * Mapping from account address to its initialized friend list\n   */\n  mapping (address => mapping(address => bool)) private friends;\n\n  /**\n   * Number of friends an account has.\n   */\n  mapping (address => uint256) public friendCount;\n\n  /**\n   * Mapping from an account address to it's approved recoverer address\n   */\n  mapping (address => address) private approvedRecoverer;\n\n  /**\n   * Nonce counter\n   */\n  mapping (address => uint256) public recoveryNonce;\n\n  /**\n   * Seen signers\n   */\n  mapping (address => bool) public seenSigners;\n\n  /**\n   * Nullifier hashes\n   */\n  mapping (uint256 => bool) public nullifierHashes;\n\n  bool public isPaused;\n  address public admin;\n\n  event RecovererVerified(address indexed recoverer);\n\n  uint256 internal immutable groupId;\n  IWorldID internal immutable worldId;\n\n  mapping(address => bool) public isVerified;\n\n  constructor(IWorldID _worldId, uint256 _groupId) payable {\n    worldId = _worldId;\n    groupId = _groupId;\n    admin = msg.sender;\n    isPaused = false;\n  }\n\n  modifier notPaused() { \n    require(!isPaused); \n    _; \n  }\n  \n  string public constant actionId = \"wid_staging_90a71492daca49652946f01ead1524de\";\n\n  event InitializedFriends(address[] friends);\n  \n  function verify(\n        address recoverer,\n        uint256 root,\n        uint256 nullifierHash,\n        uint256[8] calldata proof\n  ) public payable {\n\n      worldId.verifyProof(\n          root,\n          groupId,\n          abi.encodePacked(recoverer).hashToField(),\n          nullifierHash,\n          abi.encodePacked(address(this)).hashToField(),\n          proof\n      );\n\n      isVerified[recoverer] = true;\n\n      emit RecovererVerified(recoverer);\n  }\n\n  /**\n   * Initialize an account (msg.sender) with an array of friends\n   */\n  function initializeWalletFriends(address[] memory friendArray) external notPaused {\n    for (uint i = 0; i < friendArray.length; i++) {\n      friends[msg.sender][friendArray[i]] = true;\n    }\n\n    friendCount[msg.sender] = friendArray.length;\n\n    emit InitializedFriends(friendArray);\n  }\n  \n  /**\n   * Getter for if an address is authorized to recover the private key\n   */\n  function isAuthorizedRecoverer(address lost, address recoverer) external view notPaused returns (bool) {\n    return approvedRecoverer[lost] == recoverer;\n  }\n\n  /**\n   * Approve a recoverer to access the \"lost\" wallet's private key. Needs signatures from all friends.\n   * Returns true on success, false otherwise.\n   */\n  function approveRecoverer(address lost, address recoverer, uint256 nonce, bytes[] calldata signatures) external notPaused returns (bool) {\n    // require(isVerified[recoverer]);\n    require(nonce == recoveryNonce[lost]);\n    require(friendCount[lost] == signatures.length);\n\n    bytes32 hash = keccak256(\n      abi.encode(lost, recoverer, nonce)\n    );\n\n    bytes32 messageHash = ECDSA.toEthSignedMessageHash(hash);\n\n    address[] memory seenFriends = new address[](friendCount[lost]);\n\n    // Check that each friend has signed the message.\n    for(uint i = 0; i < friendCount[lost]; i++) {\n      address signer = ECDSA.recover(messageHash, signatures[i]);\n      require(!seenSigners[signer]);\n      require(friends[lost][signer]);\n      seenSigners[signer] = true;\n      seenFriends[i] = signer;\n    }\n\n    // Reset seen signers list.\n    for(uint i = 0; i < friendCount[lost]; i++) {\n      address friend = seenFriends[i];\n      seenSigners[friend] = false;\n    }\n\n    approvedRecoverer[lost] = recoverer;\n    recoveryNonce[lost] += 1;\n\n    return true;\n  }\n\n  function pause() external {\n    require(msg.sender == admin);\n    isPaused = true;\n  }\n}\n\n", "references": [], "imports": ["ECDSA.sol", "worldcoin/world-id/libraries/ByteHasher.sol", "worldcoin/world-id/interfaces/IWorldID.sol"]}}, "contractTypes": {"ECDSA": {"contractName": "ECDSA", "sourceId": "ECDSA.sol", "deploymentBytecode": {"bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202e0d729bc9a2a64979444643446c54df8e04b1ceb70abc316f68fe3547548db464736f6c634300080f0033"}, "runtimeBytecode": {"bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202e0d729bc9a2a64979444643446c54df8e04b1ceb70abc316f68fe3547548db464736f6c634300080f0033"}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.", "kind": "dev", "methods": {}, "version": 1}}, "Keycovery": {"contractName": "Keycovery", "sourceId": "Keycovery.sol", "deploymentBytecode": {"bytecode": "0x60c06040526040516111a83803806111a883398101604081905261002291610053565b6001600160a01b039190911660a052608052600680546001600160a81b031916336101000260ff191617905561008d565b6000806040838503121561006657600080fd5b82516001600160a01b038116811461007d57600080fd5b6020939093015192949293505050565b60805160a0516110f66100b260003960006103b1015260006103e101526110f66000f3fe6080604052600436106100c25760003560e01c80638456cb591161007f578063b9209e3311610059578063b9209e331461021d578063bb2f74941461024d578063e902e33c1461027a578063f851a4401461029a57600080fd5b80638456cb59146101be578063a20ab6b5146101d3578063b187bd261461020357600080fd5b8063123c3a87146100c75780631e6ab533146100e95780631f79a1e9146100fc57806323cb5d101461014157806336b6e82b1461016157806349bcad0a14610183575b600080fd5b3480156100d357600080fd5b506100e76100e2366004610cb3565b6102d7565b005b6100e76100f7366004610d78565b6103af565b34801561010857600080fd5b5061012c610117366004610dc6565b60056020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b34801561014d57600080fd5b5061012c61015c366004610ddf565b61050b565b34801561016d57600080fd5b50610176610859565b6040516101389190610ead565b34801561018f57600080fd5b506101b061019e366004610ee0565b60036020526000908152604090205481565b604051908152602001610138565b3480156101ca57600080fd5b506100e7610875565b3480156101df57600080fd5b5061012c6101ee366004610ee0565b60046020526000908152604090205460ff1681565b34801561020f57600080fd5b5060065461012c9060ff1681565b34801561022957600080fd5b5061012c610238366004610ee0565b60076020526000908152604090205460ff1681565b34801561025957600080fd5b506101b0610268366004610ee0565b60016020526000908152604090205481565b34801561028657600080fd5b5061012c610295366004610f02565b6108a0565b3480156102a657600080fd5b506006546102bf9061010090046001600160a01b031681565b6040516001600160a01b039091168152602001610138565b60065460ff16156102e757600080fd5b60005b815181101561035e5733600090815260208190526040812083516001929085908590811061031a5761031a610f35565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061035681610f61565b9150506102ea565b508051336000908152600160205260409081902091909155517fea65d08fb21a2c2b924426b0aa597baecda61ac7f10dbb1ebb97010b078dc156906103a4908390610f7a565b60405180910390a150565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633bc778e3847f00000000000000000000000000000000000000000000000000000000000000006104408860405160200161042c919060609190911b6bffffffffffffffffffffffff1916815260140190565b6040516020818303038152906040526108d6565b6040516bffffffffffffffffffffffff193060601b16602082015287906104699060340161042c565b876040518763ffffffff1660e01b815260040161048b96959493929190610fc7565b60006040518083038186803b1580156104a357600080fd5b505afa1580156104b7573d6000803e3d6000fd5b5050506001600160a01b038516600081815260076020526040808220805460ff19166001179055519192507fe2c6f560bd6819cb1c5d492ba2d8d755610e0b7937501651a3634b1ac815e3c891a250505050565b60065460009060ff161561051e57600080fd5b6001600160a01b038616600090815260036020526040902054841461054257600080fd5b6001600160a01b038616600090815260016020526040902054821461056657600080fd5b604080516001600160a01b038881166020808401829052918916838501526060808401899052845180850390910181526080840185528051908301207f19457468657265756d205369676e6564204d6573736167653a0a33320000000060a085015260bc8085018290528551808603909101815260dc909401855283519383019390932060009182526001909252928320549192909167ffffffffffffffff81111561061457610614610c81565b60405190808252806020026020018201604052801561063d578160200160208202803683370190505b50905060005b6001600160a01b038a166000908152600160205260409020548110156107845760006106c78489898581811061067b5761067b610f35565b905060200281019061068d9190611003565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061090b92505050565b6001600160a01b03811660009081526004602052604090205490915060ff16156106f057600080fd5b6001600160a01b03808c166000908152602081815260408083209385168352929052205460ff1661072057600080fd5b6001600160a01b0381166000908152600460205260409020805460ff191660011790558251819084908490811061075957610759610f35565b6001600160a01b0390921660209283029190910190910152508061077c81610f61565b915050610643565b5060005b6001600160a01b038a166000908152600160205260409020548110156107fa5760008282815181106107bc576107bc610f35565b6020908102919091018101516001600160a01b03166000908152600490915260409020805460ff1916905550806107f281610f61565b915050610788565b506001600160a01b03898116600090815260026020908152604080832080546001600160a01b031916948d16949094179093556003905290812080546001929061084590849061104a565b9091555060019a9950505050505050505050565b6040518060600160405280602c8152602001611095602c913981565b60065461010090046001600160a01b0316331461089157600080fd5b6006805460ff19166001179055565b60065460009060ff16156108b357600080fd5b506001600160a01b03918216600090815260026020526040902054821691161490565b60006008826040516020016108eb9190611062565b60408051601f198184030181529190528051602090910120901c92915050565b600080600061091a858561092f565b915091506109278161099d565b509392505050565b60008082516041036109655760208301516040840151606085015160001a61095987828585610b5b565b94509450505050610996565b825160400361098e5760208301516040840151610983868383610c48565b935093505050610996565b506000905060025b9250929050565b60008160048111156109b1576109b161107e565b036109b95750565b60018160048111156109cd576109cd61107e565b03610a1f5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064015b60405180910390fd5b6002816004811115610a3357610a3361107e565b03610a805760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610a16565b6003816004811115610a9457610a9461107e565b03610aec5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610a16565b6004816004811115610b0057610b0061107e565b03610b585760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610a16565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610b925750600090506003610c3f565b8460ff16601b14158015610baa57508460ff16601c14155b15610bbb5750600090506004610c3f565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610c0f573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610c3857600060019250925050610c3f565b9150600090505b94509492505050565b6000806001600160ff1b03831681610c6560ff86901c601b61104a565b9050610c7387828885610b5b565b935093505050935093915050565b634e487b7160e01b600052604160045260246000fd5b80356001600160a01b0381168114610cae57600080fd5b919050565b60006020808385031215610cc657600080fd5b823567ffffffffffffffff80821115610cde57600080fd5b818501915085601f830112610cf257600080fd5b813581811115610d0457610d04610c81565b8060051b604051601f19603f83011681018181108582111715610d2957610d29610c81565b604052918252848201925083810185019188831115610d4757600080fd5b938501935b82851015610d6c57610d5d85610c97565b84529385019392850192610d4c565b98975050505050505050565b600080600080610160808688031215610d9057600080fd5b610d9986610c97565b94506020860135935060408601359250868187011115610db857600080fd5b509295919450926060019150565b600060208284031215610dd857600080fd5b5035919050565b600080600080600060808688031215610df757600080fd5b610e0086610c97565b9450610e0e60208701610c97565b935060408601359250606086013567ffffffffffffffff80821115610e3257600080fd5b818801915088601f830112610e4657600080fd5b813581811115610e5557600080fd5b8960208260051b8501011115610e6a57600080fd5b9699959850939650602001949392505050565b60005b83811015610e98578181015183820152602001610e80565b83811115610ea7576000848401525b50505050565b6020815260008251806020840152610ecc816040850160208701610e7d565b601f01601f19169190910160400192915050565b600060208284031215610ef257600080fd5b610efb82610c97565b9392505050565b60008060408385031215610f1557600080fd5b610f1e83610c97565b9150610f2c60208401610c97565b90509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610f7357610f73610f4b565b5060010190565b6020808252825182820181905260009190848201906040850190845b81811015610fbb5783516001600160a01b031683529284019291840191600101610f96565b50909695505050505050565b60006101a0820190508782528660208301528560408301528460608301528360808301526101008360a084013760008152979650505050505050565b6000808335601e1984360301811261101a57600080fd5b83018035915067ffffffffffffffff82111561103557600080fd5b60200191503681900382131561099657600080fd5b6000821982111561105d5761105d610f4b565b500190565b60008251611074818460208701610e7d565b9190910192915050565b634e487b7160e01b600052602160045260246000fdfe7769645f73746167696e675f3930613731343932646163613439363532393436663031656164313532346465a2646970667358221220ede74c1e8b8adc4842c936d739199b6d48e082f1f598b7704e6395430744990564736f6c634300080f0033"}, "runtimeBytecode": {"bytecode": "0x60c06040526040516111a83803806111a883398101604081905261002291610053565b6001600160a01b039190911660a052608052600680546001600160a81b031916336101000260ff191617905561008d565b6000806040838503121561006657600080fd5b82516001600160a01b038116811461007d57600080fd5b6020939093015192949293505050565b60805160a0516110f66100b260003960006103b1015260006103e101526110f66000f3fe6080604052600436106100c25760003560e01c80638456cb591161007f578063b9209e3311610059578063b9209e331461021d578063bb2f74941461024d578063e902e33c1461027a578063f851a4401461029a57600080fd5b80638456cb59146101be578063a20ab6b5146101d3578063b187bd261461020357600080fd5b8063123c3a87146100c75780631e6ab533146100e95780631f79a1e9146100fc57806323cb5d101461014157806336b6e82b1461016157806349bcad0a14610183575b600080fd5b3480156100d357600080fd5b506100e76100e2366004610cb3565b6102d7565b005b6100e76100f7366004610d78565b6103af565b34801561010857600080fd5b5061012c610117366004610dc6565b60056020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b34801561014d57600080fd5b5061012c61015c366004610ddf565b61050b565b34801561016d57600080fd5b50610176610859565b6040516101389190610ead565b34801561018f57600080fd5b506101b061019e366004610ee0565b60036020526000908152604090205481565b604051908152602001610138565b3480156101ca57600080fd5b506100e7610875565b3480156101df57600080fd5b5061012c6101ee366004610ee0565b60046020526000908152604090205460ff1681565b34801561020f57600080fd5b5060065461012c9060ff1681565b34801561022957600080fd5b5061012c610238366004610ee0565b60076020526000908152604090205460ff1681565b34801561025957600080fd5b506101b0610268366004610ee0565b60016020526000908152604090205481565b34801561028657600080fd5b5061012c610295366004610f02565b6108a0565b3480156102a657600080fd5b506006546102bf9061010090046001600160a01b031681565b6040516001600160a01b039091168152602001610138565b60065460ff16156102e757600080fd5b60005b815181101561035e5733600090815260208190526040812083516001929085908590811061031a5761031a610f35565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061035681610f61565b9150506102ea565b508051336000908152600160205260409081902091909155517fea65d08fb21a2c2b924426b0aa597baecda61ac7f10dbb1ebb97010b078dc156906103a4908390610f7a565b60405180910390a150565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633bc778e3847f00000000000000000000000000000000000000000000000000000000000000006104408860405160200161042c919060609190911b6bffffffffffffffffffffffff1916815260140190565b6040516020818303038152906040526108d6565b6040516bffffffffffffffffffffffff193060601b16602082015287906104699060340161042c565b876040518763ffffffff1660e01b815260040161048b96959493929190610fc7565b60006040518083038186803b1580156104a357600080fd5b505afa1580156104b7573d6000803e3d6000fd5b5050506001600160a01b038516600081815260076020526040808220805460ff19166001179055519192507fe2c6f560bd6819cb1c5d492ba2d8d755610e0b7937501651a3634b1ac815e3c891a250505050565b60065460009060ff161561051e57600080fd5b6001600160a01b038616600090815260036020526040902054841461054257600080fd5b6001600160a01b038616600090815260016020526040902054821461056657600080fd5b604080516001600160a01b038881166020808401829052918916838501526060808401899052845180850390910181526080840185528051908301207f19457468657265756d205369676e6564204d6573736167653a0a33320000000060a085015260bc8085018290528551808603909101815260dc909401855283519383019390932060009182526001909252928320549192909167ffffffffffffffff81111561061457610614610c81565b60405190808252806020026020018201604052801561063d578160200160208202803683370190505b50905060005b6001600160a01b038a166000908152600160205260409020548110156107845760006106c78489898581811061067b5761067b610f35565b905060200281019061068d9190611003565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061090b92505050565b6001600160a01b03811660009081526004602052604090205490915060ff16156106f057600080fd5b6001600160a01b03808c166000908152602081815260408083209385168352929052205460ff1661072057600080fd5b6001600160a01b0381166000908152600460205260409020805460ff191660011790558251819084908490811061075957610759610f35565b6001600160a01b0390921660209283029190910190910152508061077c81610f61565b915050610643565b5060005b6001600160a01b038a166000908152600160205260409020548110156107fa5760008282815181106107bc576107bc610f35565b6020908102919091018101516001600160a01b03166000908152600490915260409020805460ff1916905550806107f281610f61565b915050610788565b506001600160a01b03898116600090815260026020908152604080832080546001600160a01b031916948d16949094179093556003905290812080546001929061084590849061104a565b9091555060019a9950505050505050505050565b6040518060600160405280602c8152602001611095602c913981565b60065461010090046001600160a01b0316331461089157600080fd5b6006805460ff19166001179055565b60065460009060ff16156108b357600080fd5b506001600160a01b03918216600090815260026020526040902054821691161490565b60006008826040516020016108eb9190611062565b60408051601f198184030181529190528051602090910120901c92915050565b600080600061091a858561092f565b915091506109278161099d565b509392505050565b60008082516041036109655760208301516040840151606085015160001a61095987828585610b5b565b94509450505050610996565b825160400361098e5760208301516040840151610983868383610c48565b935093505050610996565b506000905060025b9250929050565b60008160048111156109b1576109b161107e565b036109b95750565b60018160048111156109cd576109cd61107e565b03610a1f5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064015b60405180910390fd5b6002816004811115610a3357610a3361107e565b03610a805760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610a16565b6003816004811115610a9457610a9461107e565b03610aec5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610a16565b6004816004811115610b0057610b0061107e565b03610b585760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610a16565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610b925750600090506003610c3f565b8460ff16601b14158015610baa57508460ff16601c14155b15610bbb5750600090506004610c3f565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610c0f573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610c3857600060019250925050610c3f565b9150600090505b94509492505050565b6000806001600160ff1b03831681610c6560ff86901c601b61104a565b9050610c7387828885610b5b565b935093505050935093915050565b634e487b7160e01b600052604160045260246000fd5b80356001600160a01b0381168114610cae57600080fd5b919050565b60006020808385031215610cc657600080fd5b823567ffffffffffffffff80821115610cde57600080fd5b818501915085601f830112610cf257600080fd5b813581811115610d0457610d04610c81565b8060051b604051601f19603f83011681018181108582111715610d2957610d29610c81565b604052918252848201925083810185019188831115610d4757600080fd5b938501935b82851015610d6c57610d5d85610c97565b84529385019392850192610d4c565b98975050505050505050565b600080600080610160808688031215610d9057600080fd5b610d9986610c97565b94506020860135935060408601359250868187011115610db857600080fd5b509295919450926060019150565b600060208284031215610dd857600080fd5b5035919050565b600080600080600060808688031215610df757600080fd5b610e0086610c97565b9450610e0e60208701610c97565b935060408601359250606086013567ffffffffffffffff80821115610e3257600080fd5b818801915088601f830112610e4657600080fd5b813581811115610e5557600080fd5b8960208260051b8501011115610e6a57600080fd5b9699959850939650602001949392505050565b60005b83811015610e98578181015183820152602001610e80565b83811115610ea7576000848401525b50505050565b6020815260008251806020840152610ecc816040850160208701610e7d565b601f01601f19169190910160400192915050565b600060208284031215610ef257600080fd5b610efb82610c97565b9392505050565b60008060408385031215610f1557600080fd5b610f1e83610c97565b9150610f2c60208401610c97565b90509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610f7357610f73610f4b565b5060010190565b6020808252825182820181905260009190848201906040850190845b81811015610fbb5783516001600160a01b031683529284019291840191600101610f96565b50909695505050505050565b60006101a0820190508782528660208301528560408301528460608301528360808301526101008360a084013760008152979650505050505050565b6000808335601e1984360301811261101a57600080fd5b83018035915067ffffffffffffffff82111561103557600080fd5b60200191503681900382131561099657600080fd5b6000821982111561105d5761105d610f4b565b500190565b60008251611074818460208701610e7d565b9190910192915050565b634e487b7160e01b600052602160045260246000fdfe7769645f73746167696e675f3930613731343932646163613439363532393436663031656164313532346465a2646970667358221220ede74c1e8b8adc4842c936d739199b6d48e082f1f598b7704e6395430744990564736f6c634300080f0033"}, "abi": [{"type": "constructor", "stateMutability": "payable", "inputs": [{"name": "_worldId", "type": "address", "internalType": "contract IWorldID"}, {"name": "_groupId", "type": "uint256", "internalType": "uint256"}]}, {"type": "event", "name": "InitializedFriends", "inputs": [{"name": "friends", "type": "address[]", "internalType": "address[]", "indexed": false}], "anonymous": false}, {"type": "event", "name": "RecovererVerified", "inputs": [{"name": "recoverer", "type": "address", "internalType": "address", "indexed": true}], "anonymous": false}, {"type": "function", "name": "actionId", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "string", "internalType": "string"}]}, {"type": "function", "name": "admin", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "approveRecoverer", "stateMutability": "nonpayable", "inputs": [{"name": "lost", "type": "address", "internalType": "address"}, {"name": "recoverer", "type": "address", "internalType": "address"}, {"name": "nonce", "type": "uint256", "internalType": "uint256"}, {"name": "signatures", "type": "bytes[]", "internalType": "bytes[]"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "friendCount", "stateMutability": "view", "inputs": [{"name": "", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "initializeWalletFriends", "stateMutability": "nonpayable", "inputs": [{"name": "friendArray", "type": "address[]", "internalType": "address[]"}], "outputs": []}, {"type": "function", "name": "isAuthorizedRecoverer", "stateMutability": "view", "inputs": [{"name": "lost", "type": "address", "internalType": "address"}, {"name": "recoverer", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "isPaused", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "isVerified", "stateMutability": "view", "inputs": [{"name": "", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "nullifierHashes", "stateMutability": "view", "inputs": [{"name": "", "type": "uint256", "internalType": "uint256"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "pause", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "recoveryNonce", "stateMutability": "view", "inputs": [{"name": "", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "seenSigners", "stateMutability": "view", "inputs": [{"name": "", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "verify", "stateMutability": "payable", "inputs": [{"name": "recoverer", "type": "address", "internalType": "address"}, {"name": "root", "type": "uint256", "internalType": "uint256"}, {"name": "nullifierHash", "type": "uint256", "internalType": "uint256"}, {"name": "proof", "type": "uint256[8]", "internalType": "uint256[8]"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {"approveRecoverer(address,address,uint256,bytes[])": {"notice": "Approve a recoverer to access the \"lost\" wallet's private key. Needs signatures from all friends. Returns true on success, false otherwise."}, "friendCount(address)": {"notice": "Number of friends an account has."}, "initializeWalletFriends(address[])": {"notice": "Initialize an account (msg.sender) with an array of friends"}, "isAuthorizedRecoverer(address,address)": {"notice": "Getter for if an address is authorized to recover the private key"}, "nullifierHashes(uint256)": {"notice": "Nullifier hashes"}, "recoveryNonce(address)": {"notice": "Nonce counter"}, "seenSigners(address)": {"notice": "Seen signers"}}, "notice": "The Keycovery database contract.", "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "Strings": {"contractName": "Strings", "sourceId": "Strings.sol", "deploymentBytecode": {"bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203bb64bb8d7f5cfc521795246cbe34c63ac4f0a2cf3774f33c0c661cfa460199964736f6c634300080f0033"}, "runtimeBytecode": {"bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203bb64bb8d7f5cfc521795246cbe34c63ac4f0a2cf3774f33c0c661cfa460199964736f6c634300080f0033"}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "String operations.", "kind": "dev", "methods": {}, "version": 1}}, "IWorldID": {"contractName": "IWorldID", "sourceId": "worldcoin/world-id/interfaces/IWorldID.sol", "deploymentBytecode": {}, "runtimeBytecode": {}, "abi": [{"type": "function", "name": "verifyProof", "stateMutability": "view", "inputs": [{"name": "root", "type": "uint256", "internalType": "uint256"}, {"name": "groupId", "type": "uint256", "internalType": "uint256"}, {"name": "signalHash", "type": "uint256", "internalType": "uint256"}, {"name": "nullifierHash", "type": "uint256", "internalType": "uint256"}, {"name": "externalNullifierHash", "type": "uint256", "internalType": "uint256"}, {"name": "proof", "type": "uint256[8]", "internalType": "uint256[8]"}], "outputs": []}], "userdoc": {"kind": "user", "methods": {"verifyProof(uint256,uint256,uint256,uint256,uint256,uint256[8])": {"notice": "Reverts if the zero-knowledge proof is invalid."}}, "version": 1}, "devdoc": {"kind": "dev", "methods": {"verifyProof(uint256,uint256,uint256,uint256,uint256,uint256[8])": {"details": "Note that a double-signaling check is not included here, and should be carried by the caller.", "params": {"externalNullifierHash": "A keccak256 hash of the external nullifier", "groupId": "The id of the Semaphore group", "nullifierHash": "The nullifier hash", "proof": "The zero-knowledge proof", "root": "The of the Merkle tree", "signalHash": "A keccak256 hash of the Semaphore signal"}}}, "version": 1}}, "ByteHasher": {"contractName": "ByteHasher", "sourceId": "worldcoin/world-id/libraries/ByteHasher.sol", "deploymentBytecode": {"bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d130f0b66a5404968be7076f612aee22389960dd31d1c1a3026ca98b1b3ff49f64736f6c634300080f0033"}, "runtimeBytecode": {"bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d130f0b66a5404968be7076f612aee22389960dd31d1c1a3026ca98b1b3ff49f64736f6c634300080f0033"}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}}}