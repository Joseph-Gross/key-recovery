{"manifest": "ethpm/3", "sources": {"Strings.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0x9d0a74a21646004cddfb9ce76172500f"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}", "references": ["ECDSA.sol"], "imports": []}, "Keycovery.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xd2fad12919f90fe9edbf34eb0955a0be"}, "content": "pragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * The Keycovery database contract.\n */\ncontract Keycovery {\n\n  /**\n   * Mapping from account address to its initialized friend list\n   */\n  mapping (address => mapping(address => bool)) private friends;\n\n  /**\n   * Number of friends an account has.\n   */\n  mapping (address => uint256) private friendCount;\n\n  /**\n   * Mapping from an account address to it's approved recoverer address\n   */\n  mapping (address => address) private approvedRecoverer;\n\n  /**\n   * Nonce counter\n   */\n  mapping (address => uint256) public recoveryCount;\n\n  /**\n   * Seen signers\n   */\n  mapping (address => bool) public seenSigners;\n\n  bool public isPaused;\n  address public admin;\n\n  constructor() {\n    isPaused = false;\n    admin = msg.sender;\n  }\n\n  modifier notPaused() { \n    require(!isPaused); \n    _; \n  }\n  \n  /**\n   * Initialize an account (msg.sender) with an array of friends\n   */\n  function initializeWalletFriends(address[] memory friendArray) external notPaused {\n    for (uint i = 0; i < friendArray.length; i++) {\n      friends[msg.sender][friendArray[i]] = true;\n    }\n  }\n  \n  /**\n   * Getter for if an address is authorized to recover the private key\n   */\n  function isAuthorizedRecoverer(address lost, address recoverer) external notPaused returns (bool) {\n    return approvedRecoverer[lost] == recoverer;\n  }\n\n  /**\n   * Approve a recoverer to access the \"lost\" wallet's private key. Needs signatures from all friends.\n   * Returns true on success, false otherwise.\n   */\n  function approveRecoverer(address lost, address recoverer, uint256 nonce, bytes[] calldata signatures) external notPaused returns (bool) {\n\n    if (nonce != recoveryCount[lost]) {\n      return false;\n    }\n\n    if (friendCount[lost] != signatures.length) {\n      return false;\n    }\n\n    bytes32 message = keccak256(\n      abi.encode(lost, recoverer, nonce)\n    );\n\n    address[] memory seenFriends = new address[](friendCount[lost]);\n\n    // Check that each friend has signed the message.\n    for(uint i = 0; i < friendCount[lost]; i++) {\n      address signer = ECDSA.recover(message, signatures[i]);\n      require(!seenSigners[signer]);\n      require(friends[lost][signer]);\n      seenSigners[signer] = true;\n      seenFriends[i] = signer;\n    }\n\n    // Reset seen signers list.\n    for(uint i = 0; i < friendCount[lost]; i++) {\n      address friend = seenFriends[i];\n      seenSigners[friend] = false;\n    }\n\n    approvedRecoverer[lost] = recoverer;\n    recoveryCount[lost] += 1;\n\n    return true;\n  }\n\n  function pause() external {\n    require(msg.sender == admin);\n    isPaused = true;\n  }\n}\n\n", "references": [], "imports": ["ECDSA.sol"]}, "ECDSA.sol": {"urls": [], "checksum": {"algorithm": "md5", "hash": "0xa6c07cede4f305ddfe5cd01632afc009"}, "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}", "references": ["Keycovery.sol"], "imports": ["Strings.sol"]}}, "contractTypes": {"ECDSA": {"contractName": "ECDSA", "sourceId": "ECDSA.sol", "deploymentBytecode": {"bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202e0d729bc9a2a64979444643446c54df8e04b1ceb70abc316f68fe3547548db464736f6c634300080f0033"}, "runtimeBytecode": {"bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202e0d729bc9a2a64979444643446c54df8e04b1ceb70abc316f68fe3547548db464736f6c634300080f0033"}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.", "kind": "dev", "methods": {}, "version": 1}}, "Keycovery": {"contractName": "Keycovery", "sourceId": "Keycovery.sol", "deploymentBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600580546001600160a81b0319166101003302179055610bbc806100366000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063b187bd261161005b578063b187bd26146100f5578063ba2e0b2114610102578063e902e33c14610130578063f851a4401461014357600080fd5b8063123c3a871461008d57806323cb5d10146100a25780638456cb59146100ca578063a20ab6b5146100d2575b600080fd5b6100a061009b366004610914565b610173565b005b6100b56100b03660046109d9565b6101fe565b60405190151581526020015b60405180910390f35b6100a061050b565b6100b56100e0366004610a77565b60046020526000908152604090205460ff1681565b6005546100b59060ff1681565b610122610110366004610a77565b60036020526000908152604090205481565b6040519081526020016100c1565b6100b561013e366004610a99565b610536565b60055461015b9061010090046001600160a01b031681565b6040516001600160a01b0390911681526020016100c1565b60055460ff161561018357600080fd5b60005b81518110156101fa573360009081526020819052604081208351600192908590859081106101b6576101b6610acc565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806101f281610af8565b915050610186565b5050565b60055460009060ff161561021157600080fd5b6001600160a01b038616600090815260036020526040902054841461023857506000610502565b6001600160a01b038616600090815260016020526040902054821461025f57506000610502565b604080516001600160a01b0388811660208084018290529189168385015260608084018990528451808503909101815260809093018452825192820192909220600092835260019091529181205467ffffffffffffffff8111156102c5576102c56108e2565b6040519080825280602002602001820160405280156102ee578160200160208202803683370190505b50905060005b6001600160a01b0389166000908152600160205260409020548110156104355760006103788488888581811061032c5761032c610acc565b905060200281019061033e9190610b11565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061056c92505050565b6001600160a01b03811660009081526004602052604090205490915060ff16156103a157600080fd5b6001600160a01b03808b166000908152602081815260408083209385168352929052205460ff166103d157600080fd5b6001600160a01b0381166000908152600460205260409020805460ff191660011790558251819084908490811061040a5761040a610acc565b6001600160a01b0390921660209283029190910190910152508061042d81610af8565b9150506102f4565b5060005b6001600160a01b0389166000908152600160205260409020548110156104ab57600082828151811061046d5761046d610acc565b6020908102919091018101516001600160a01b03166000908152600490915260409020805460ff1916905550806104a381610af8565b915050610439565b506001600160a01b03888116600090815260026020908152604080832080546001600160a01b031916948c1694909417909355600390529081208054600192906104f6908490610b58565b90915550600193505050505b95945050505050565b60055461010090046001600160a01b0316331461052757600080fd5b6005805460ff19166001179055565b60055460009060ff161561054957600080fd5b506001600160a01b03918216600090815260026020526040902054821691161490565b600080600061057b8585610590565b91509150610588816105fe565b509392505050565b60008082516041036105c65760208301516040840151606085015160001a6105ba878285856107bc565b945094505050506105f7565b82516040036105ef57602083015160408401516105e48683836108a9565b9350935050506105f7565b506000905060025b9250929050565b600081600481111561061257610612610b70565b0361061a5750565b600181600481111561062e5761062e610b70565b036106805760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064015b60405180910390fd5b600281600481111561069457610694610b70565b036106e15760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610677565b60038160048111156106f5576106f5610b70565b0361074d5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610677565b600481600481111561076157610761610b70565b036107b95760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610677565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156107f357506000905060036108a0565b8460ff16601b1415801561080b57508460ff16601c14155b1561081c57506000905060046108a0565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610870573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610899576000600192509250506108a0565b9150600090505b94509492505050565b6000806001600160ff1b038316816108c660ff86901c601b610b58565b90506108d4878288856107bc565b935093505050935093915050565b634e487b7160e01b600052604160045260246000fd5b80356001600160a01b038116811461090f57600080fd5b919050565b6000602080838503121561092757600080fd5b823567ffffffffffffffff8082111561093f57600080fd5b818501915085601f83011261095357600080fd5b813581811115610965576109656108e2565b8060051b604051601f19603f8301168101818110858211171561098a5761098a6108e2565b6040529182528482019250838101850191888311156109a857600080fd5b938501935b828510156109cd576109be856108f8565b845293850193928501926109ad565b98975050505050505050565b6000806000806000608086880312156109f157600080fd5b6109fa866108f8565b9450610a08602087016108f8565b935060408601359250606086013567ffffffffffffffff80821115610a2c57600080fd5b818801915088601f830112610a4057600080fd5b813581811115610a4f57600080fd5b8960208260051b8501011115610a6457600080fd5b9699959850939650602001949392505050565b600060208284031215610a8957600080fd5b610a92826108f8565b9392505050565b60008060408385031215610aac57600080fd5b610ab5836108f8565b9150610ac3602084016108f8565b90509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610b0a57610b0a610ae2565b5060010190565b6000808335601e19843603018112610b2857600080fd5b83018035915067ffffffffffffffff821115610b4357600080fd5b6020019150368190038213156105f757600080fd5b60008219821115610b6b57610b6b610ae2565b500190565b634e487b7160e01b600052602160045260246000fdfea264697066735822122098cf2e53930219c7dd6d0a687030a6d6a49003f33a79db96fc37880fbdc64d3464736f6c634300080f0033"}, "runtimeBytecode": {"bytecode": "0x608060405234801561001057600080fd5b50600580546001600160a81b0319166101003302179055610bbc806100366000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063b187bd261161005b578063b187bd26146100f5578063ba2e0b2114610102578063e902e33c14610130578063f851a4401461014357600080fd5b8063123c3a871461008d57806323cb5d10146100a25780638456cb59146100ca578063a20ab6b5146100d2575b600080fd5b6100a061009b366004610914565b610173565b005b6100b56100b03660046109d9565b6101fe565b60405190151581526020015b60405180910390f35b6100a061050b565b6100b56100e0366004610a77565b60046020526000908152604090205460ff1681565b6005546100b59060ff1681565b610122610110366004610a77565b60036020526000908152604090205481565b6040519081526020016100c1565b6100b561013e366004610a99565b610536565b60055461015b9061010090046001600160a01b031681565b6040516001600160a01b0390911681526020016100c1565b60055460ff161561018357600080fd5b60005b81518110156101fa573360009081526020819052604081208351600192908590859081106101b6576101b6610acc565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806101f281610af8565b915050610186565b5050565b60055460009060ff161561021157600080fd5b6001600160a01b038616600090815260036020526040902054841461023857506000610502565b6001600160a01b038616600090815260016020526040902054821461025f57506000610502565b604080516001600160a01b0388811660208084018290529189168385015260608084018990528451808503909101815260809093018452825192820192909220600092835260019091529181205467ffffffffffffffff8111156102c5576102c56108e2565b6040519080825280602002602001820160405280156102ee578160200160208202803683370190505b50905060005b6001600160a01b0389166000908152600160205260409020548110156104355760006103788488888581811061032c5761032c610acc565b905060200281019061033e9190610b11565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061056c92505050565b6001600160a01b03811660009081526004602052604090205490915060ff16156103a157600080fd5b6001600160a01b03808b166000908152602081815260408083209385168352929052205460ff166103d157600080fd5b6001600160a01b0381166000908152600460205260409020805460ff191660011790558251819084908490811061040a5761040a610acc565b6001600160a01b0390921660209283029190910190910152508061042d81610af8565b9150506102f4565b5060005b6001600160a01b0389166000908152600160205260409020548110156104ab57600082828151811061046d5761046d610acc565b6020908102919091018101516001600160a01b03166000908152600490915260409020805460ff1916905550806104a381610af8565b915050610439565b506001600160a01b03888116600090815260026020908152604080832080546001600160a01b031916948c1694909417909355600390529081208054600192906104f6908490610b58565b90915550600193505050505b95945050505050565b60055461010090046001600160a01b0316331461052757600080fd5b6005805460ff19166001179055565b60055460009060ff161561054957600080fd5b506001600160a01b03918216600090815260026020526040902054821691161490565b600080600061057b8585610590565b91509150610588816105fe565b509392505050565b60008082516041036105c65760208301516040840151606085015160001a6105ba878285856107bc565b945094505050506105f7565b82516040036105ef57602083015160408401516105e48683836108a9565b9350935050506105f7565b506000905060025b9250929050565b600081600481111561061257610612610b70565b0361061a5750565b600181600481111561062e5761062e610b70565b036106805760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064015b60405180910390fd5b600281600481111561069457610694610b70565b036106e15760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610677565b60038160048111156106f5576106f5610b70565b0361074d5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610677565b600481600481111561076157610761610b70565b036107b95760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610677565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156107f357506000905060036108a0565b8460ff16601b1415801561080b57508460ff16601c14155b1561081c57506000905060046108a0565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610870573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610899576000600192509250506108a0565b9150600090505b94509492505050565b6000806001600160ff1b038316816108c660ff86901c601b610b58565b90506108d4878288856107bc565b935093505050935093915050565b634e487b7160e01b600052604160045260246000fd5b80356001600160a01b038116811461090f57600080fd5b919050565b6000602080838503121561092757600080fd5b823567ffffffffffffffff8082111561093f57600080fd5b818501915085601f83011261095357600080fd5b813581811115610965576109656108e2565b8060051b604051601f19603f8301168101818110858211171561098a5761098a6108e2565b6040529182528482019250838101850191888311156109a857600080fd5b938501935b828510156109cd576109be856108f8565b845293850193928501926109ad565b98975050505050505050565b6000806000806000608086880312156109f157600080fd5b6109fa866108f8565b9450610a08602087016108f8565b935060408601359250606086013567ffffffffffffffff80821115610a2c57600080fd5b818801915088601f830112610a4057600080fd5b813581811115610a4f57600080fd5b8960208260051b8501011115610a6457600080fd5b9699959850939650602001949392505050565b600060208284031215610a8957600080fd5b610a92826108f8565b9392505050565b60008060408385031215610aac57600080fd5b610ab5836108f8565b9150610ac3602084016108f8565b90509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610b0a57610b0a610ae2565b5060010190565b6000808335601e19843603018112610b2857600080fd5b83018035915067ffffffffffffffff821115610b4357600080fd5b6020019150368190038213156105f757600080fd5b60008219821115610b6b57610b6b610ae2565b500190565b634e487b7160e01b600052602160045260246000fdfea264697066735822122098cf2e53930219c7dd6d0a687030a6d6a49003f33a79db96fc37880fbdc64d3464736f6c634300080f0033"}, "abi": [{"type": "constructor", "stateMutability": "nonpayable", "inputs": []}, {"type": "function", "name": "admin", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "address", "internalType": "address"}]}, {"type": "function", "name": "approveRecoverer", "stateMutability": "nonpayable", "inputs": [{"name": "lost", "type": "address", "internalType": "address"}, {"name": "recoverer", "type": "address", "internalType": "address"}, {"name": "nonce", "type": "uint256", "internalType": "uint256"}, {"name": "signatures", "type": "bytes[]", "internalType": "bytes[]"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "initializeWalletFriends", "stateMutability": "nonpayable", "inputs": [{"name": "friendArray", "type": "address[]", "internalType": "address[]"}], "outputs": []}, {"type": "function", "name": "isAuthorizedRecoverer", "stateMutability": "nonpayable", "inputs": [{"name": "lost", "type": "address", "internalType": "address"}, {"name": "recoverer", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "isPaused", "stateMutability": "view", "inputs": [], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}, {"type": "function", "name": "pause", "stateMutability": "nonpayable", "inputs": [], "outputs": []}, {"type": "function", "name": "recoveryCount", "stateMutability": "view", "inputs": [{"name": "", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}]}, {"type": "function", "name": "seenSigners", "stateMutability": "view", "inputs": [{"name": "", "type": "address", "internalType": "address"}], "outputs": [{"name": "", "type": "bool", "internalType": "bool"}]}], "userdoc": {"kind": "user", "methods": {"approveRecoverer(address,address,uint256,bytes[])": {"notice": "Approve a recoverer to access the \"lost\" wallet's private key. Needs signatures from all friends. Returns true on success, false otherwise."}, "initializeWalletFriends(address[])": {"notice": "Initialize an account (msg.sender) with an array of friends"}, "isAuthorizedRecoverer(address,address)": {"notice": "Getter for if an address is authorized to recover the private key"}, "recoveryCount(address)": {"notice": "Nonce counter"}, "seenSigners(address)": {"notice": "Seen signers"}}, "notice": "The Keycovery database contract.", "version": 1}, "devdoc": {"kind": "dev", "methods": {}, "version": 1}}, "Strings": {"contractName": "Strings", "sourceId": "Strings.sol", "deploymentBytecode": {"bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203bb64bb8d7f5cfc521795246cbe34c63ac4f0a2cf3774f33c0c661cfa460199964736f6c634300080f0033"}, "runtimeBytecode": {"bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203bb64bb8d7f5cfc521795246cbe34c63ac4f0a2cf3774f33c0c661cfa460199964736f6c634300080f0033"}, "abi": [], "userdoc": {"kind": "user", "methods": {}, "version": 1}, "devdoc": {"details": "String operations.", "kind": "dev", "methods": {}, "version": 1}}}}